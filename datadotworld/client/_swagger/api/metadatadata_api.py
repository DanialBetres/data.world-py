# coding: utf-8

"""
    data.world API

    # data.world in a nutshell  data.world is a productive, secure platform for modern data teamwork.  We bring together your data practitioners, subject matter experts, and other stakeholders by removing costly barriers to data discovery, comprehension, integration, and sharing.   Everything your team needs to quickly understand and use data stays with it.   Social features and integrations encourage collaborators to ask and answer questions, share discoveries, and coordinate closely while still using their preferred tools.  Our focus on interoperability helps you enhance your own data with data from any source, including our vast and growing library of free public datasets.   Sophisticated permissions, auditing features, and more make it easy to manage who views your data and what they do with it.  # Conventions  ## Authentication  All data.world API calls require an API token.   OAuth2 is the preferred and most secure method for authenticating users of your data.world applications. Visit our [oauth documentation](https://apidocs.data.world/toolkit/oauth) for additional information. Alternatively, you can obtain a token for _personal use or testing_ by navigating to your profile settings, under the Advanced tab ([https://data.world/settings/advanced](https://data.world/settings/advanced)).  Authentication must be provided in API requests via the `Authorization` header. For example, for a user whose API token is `my_api_token`, the request header should be `Authorization: Bearer my_api_token` (note the `Bearer` prefix).  ## Content type   By default, `application/json` is the content type used in request and response bodies. Exceptions are noted in respective endpoint documentation.  ## HTTPS only   Our APIs can only be accessed via HTTPS.  # Interested in building data.world apps?  Check out our [developer portal](https://apidocs.data.world) for tips on how to get started, tutorials, and to interact with the API endpoints right within your browser.  # noqa: E501

    OpenAPI spec version: 0.21.0
    Contact: help@data.world
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from _swagger.api_client import ApiClient


class MetadatadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_catalog_column(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Create a Column  # noqa: E501

        Create a Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_catalog_column(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_catalog_column_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_catalog_column_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def create_catalog_column_with_http_info(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Create a Column  # noqa: E501

        Create a Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_catalog_column_with_http_info(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_catalog_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_catalog_column`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `create_catalog_column`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `create_catalog_column`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `create_catalog_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_catalog_table(self, body, owner, sourceid, **kwargs):  # noqa: E501
        """Create a new table metadata  # noqa: E501

        Create a new table metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_catalog_table(body, owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_catalog_table_with_http_info(body, owner, sourceid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_catalog_table_with_http_info(body, owner, sourceid, **kwargs)  # noqa: E501
            return data

    def create_catalog_table_with_http_info(self, body, owner, sourceid, **kwargs):  # noqa: E501
        """Create a new table metadata  # noqa: E501

        Create a new table metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_catalog_table_with_http_info(body, owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_catalog_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_catalog_table`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `create_catalog_table`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `create_catalog_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_catalog_column(self, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Delete a Column  # noqa: E501

        Delete a Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_column(owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_catalog_column_with_http_info(owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_catalog_column_with_http_info(owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
            return data

    def delete_catalog_column_with_http_info(self, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Delete a Column  # noqa: E501

        Delete a Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_column_with_http_info(owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'tableid', 'columnid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_catalog_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `delete_catalog_column`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `delete_catalog_column`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `delete_catalog_column`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if ('columnid' not in params or
                params['columnid'] is None):
            raise ValueError("Missing the required parameter `columnid` when calling `delete_catalog_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501
        if 'columnid' in params:
            path_params['columnid'] = params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_catalog_table(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_table(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_catalog_table_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_catalog_table_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def delete_catalog_table_with_http_info(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_catalog_table_with_http_info(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_catalog_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `delete_catalog_table`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `delete_catalog_table`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `delete_catalog_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_database(self, owner, sourceid, **kwargs):  # noqa: E501
        """Get an individual datasource metadata  # noqa: E501

        Get an individual datasource metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database(owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :return: DatabaseDbo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_database_with_http_info(owner, sourceid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_database_with_http_info(owner, sourceid, **kwargs)  # noqa: E501
            return data

    def get_database_with_http_info(self, owner, sourceid, **kwargs):  # noqa: E501
        """Get an individual datasource metadata  # noqa: E501

        Get an individual datasource metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database_with_http_info(owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :return: DatabaseDbo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_database`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `get_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatabaseDbo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_databases(self, owner, **kwargs):  # noqa: E501
        """Get datasources by owner.  # noqa: E501

        Get datasources by owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_databases(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str size:
        :param str _from:
        :param str sort:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_databases_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.get_databases_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def get_databases_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Get datasources by owner.  # noqa: E501

        Get datasources by owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_databases_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str size:
        :param str _from:
        :param str sort:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'size', '_from', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_databases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_databases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Get an individual table metadata  # noqa: E501

        Get an individual table metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: MetadataResourceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def get_table_with_http_info(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Get an individual table metadata  # noqa: E501

        Get an individual table metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_with_http_info(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: MetadataResourceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_table`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `get_table`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `get_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataResourceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_column(self, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Get an individual column metadata  # noqa: E501

        Get an individual column metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_column(owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: MetadataResourceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_column_with_http_info(owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_column_with_http_info(owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
            return data

    def get_table_column_with_http_info(self, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Get an individual column metadata  # noqa: E501

        Get an individual column metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_column_with_http_info(owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: MetadataResourceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'tableid', 'columnid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_table_column`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `get_table_column`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `get_table_column`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if ('columnid' not in params or
                params['columnid'] is None):
            raise ValueError("Missing the required parameter `columnid` when calling `get_table_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501
        if 'columnid' in params:
            path_params['columnid'] = params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataResourceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_columns(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Get columns for a given table  # noqa: E501

        Get columns for a given table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_columns(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str size:
        :param str _from:
        :param str sort:
        :return: PaginatedMetadataResourceResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_columns_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_columns_with_http_info(owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def get_table_columns_with_http_info(self, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Get columns for a given table  # noqa: E501

        Get columns for a given table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_columns_with_http_info(owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str size:
        :param str _from:
        :param str sort:
        :return: PaginatedMetadataResourceResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'tableid', 'size', '_from', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_table_columns`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `get_table_columns`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `get_table_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedMetadataResourceResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tables(self, owner, sourceid, **kwargs):  # noqa: E501
        """Get tables for a data source  # noqa: E501

        Get tables for a data source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tables(owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str typelabel:
        :param str typeiri:
        :param str size:
        :param str _from:
        :param str sort:
        :return: PaginatedMetadataResourceResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tables_with_http_info(owner, sourceid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tables_with_http_info(owner, sourceid, **kwargs)  # noqa: E501
            return data

    def get_tables_with_http_info(self, owner, sourceid, **kwargs):  # noqa: E501
        """Get tables for a data source  # noqa: E501

        Get tables for a data source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tables_with_http_info(owner, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str typelabel:
        :param str typeiri:
        :param str size:
        :param str _from:
        :param str sort:
        :return: PaginatedMetadataResourceResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'sourceid', 'typelabel', 'typeiri', 'size', '_from', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_tables`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `get_tables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501

        query_params = []
        if 'typelabel' in params:
            query_params.append(('typelabel', params['typelabel']))  # noqa: E501
        if 'typeiri' in params:
            query_params.append(('typeiri', params['typeiri']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedMetadataResourceResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_catalog_column(self, body, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Update an existing Column  # noqa: E501

        Update an existing Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_catalog_column(body, owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
            return data

    def patch_catalog_column_with_http_info(self, body, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Update an existing Column  # noqa: E501

        Update an existing Column.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid', 'tableid', 'columnid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_catalog_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_catalog_column`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `patch_catalog_column`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `patch_catalog_column`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `patch_catalog_column`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if ('columnid' not in params or
                params['columnid'] is None):
            raise ValueError("Missing the required parameter `columnid` when calling `patch_catalog_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501
        if 'columnid' in params:
            path_params['columnid'] = params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_catalog_table(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Update an existing table  # noqa: E501

        Update an existing table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_catalog_table(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_catalog_table_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_catalog_table_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def patch_catalog_table_with_http_info(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Update an existing table  # noqa: E501

        Update an existing table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_catalog_table_with_http_info(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_catalog_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_catalog_table`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `patch_catalog_table`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `patch_catalog_table`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `patch_catalog_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_catalog_column(self, body, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Replace an existing column  # noqa: E501

        Replace an existing column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_catalog_column(body, owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, **kwargs)  # noqa: E501
            return data

    def replace_catalog_column_with_http_info(self, body, owner, sourceid, tableid, columnid, **kwargs):  # noqa: E501
        """Replace an existing column  # noqa: E501

        Replace an existing column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_catalog_column_with_http_info(body, owner, sourceid, tableid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogColumnRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :param str columnid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid', 'tableid', 'columnid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_catalog_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_catalog_column`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `replace_catalog_column`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `replace_catalog_column`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `replace_catalog_column`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if ('columnid' not in params or
                params['columnid'] is None):
            raise ValueError("Missing the required parameter `columnid` when calling `replace_catalog_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501
        if 'columnid' in params:
            path_params['columnid'] = params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_catalog_table(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Replace an existing table  # noqa: E501

        Replace an existing table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_catalog_table(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_catalog_table_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_catalog_table_with_http_info(body, owner, sourceid, tableid, **kwargs)  # noqa: E501
            return data

    def replace_catalog_table_with_http_info(self, body, owner, sourceid, tableid, **kwargs):  # noqa: E501
        """Replace an existing table  # noqa: E501

        Replace an existing table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_catalog_table_with_http_info(body, owner, sourceid, tableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CatalogTableRequest body: (required)
        :param str owner: id of the user or organization (required)
        :param str sourceid: database source id (required)
        :param str tableid: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'owner', 'sourceid', 'tableid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_catalog_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_catalog_table`")  # noqa: E501
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `replace_catalog_table`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if ('sourceid' not in params or
                params['sourceid'] is None):
            raise ValueError("Missing the required parameter `sourceid` when calling `replace_catalog_table`")  # noqa: E501
        # verify the required parameter 'tableid' is set
        if ('tableid' not in params or
                params['tableid'] is None):
            raise ValueError("Missing the required parameter `tableid` when calling `replace_catalog_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'sourceid' in params:
            path_params['sourceid'] = params['sourceid']  # noqa: E501
        if 'tableid' in params:
            path_params['tableid'] = params['tableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
